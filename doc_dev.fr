############################# Wi4MPI License ###########################
# `04/04/2016`                                                         #
# Copyright or (C) or Copr. Commissariat a l'Energie Atomique          #
#                                                                      #
# IDDN.FR.001.210022.000.S.P.2014.000.10800                            #
# This file is part of the Wi4MPI library.                             #
#                                                                      #
# This software is governed by the CeCILL-C license under French law   #
# and abiding by the rules of distribution of free software. You can   #
# use, modify and/ or redistribute the software under the terms of     #
# the CeCILL-C license as circulated by CEA, CNRS and INRIA at the     #
# following URL http://www.cecill.info.                                #
#                                                                      #
# The fact that you are presently reading this means that you have     #
# had knowledge of the CeCILL-C license and that you accept its        #
# terms.                                                               #
#                                                                      #
# Authors:                                                             #
#   - Delforge Tony <tony.delforge.tgcc@cea.fr>                        #
#   - Ducrot Vincent <vincent.ducrot.tgcc@cea.fr>                      #
#                                                                      #
########################################################################


:Authors:
    Tony Delforge (tony.delforge.tgcc@cea.fr)
    Vincent Ducrot (vincent.ducrot.tgcc@cea.fr)

Documentation développeur
=========================

Sommaire:
---------
1. Introduction
2. La bibliothèque
    1. Fonctionnement
    2. Implémentation
        1. Configuration de la bibliothèque
        2. Surcharge des symboles
        3. Code chooser ASM
        4. A_MPI_Function
        5. R_MPI_Function
        6. Thread safety
        7. L'interface
    3. Environnement d'exécution
    4. Les Fichiers
    5. Évolution
3. Générateurs
    1. Code-C
    2. Code-Fortran
    3. Dictionnaires
        1. Functions.json -- C
        2. Mappers.json -- C
        3. Functions.json -- Fortran
        4. Mappers.json -- Fortran

------------

INTRODUCTION
============
La bibliothèque WI4MPI fait de la traduction d'ABI entre les différentes souches MPI. Ceci permet de lancer un binaire non compatible avec la souche MPI chargée dans l'environnement d'exécution.

La bibliothèque est développée en C, dont le code est à 90% généré via un script python et des fichiers de configuration JSON contenant les dictionnaires des différentes fonctions MPI et ceux des différents mappers permettant la traduction. La version actuelle de la bibliothèque est thread safe, couvre la Norme MPI 3.1 avec le support de MPI-IO et est compatible C/C++/Fortran (Attention: l'API MPI C++ étant déprecated (cf:norme MPI) n'est pas supportée).

La bibliothèque
===============

Fonctionnement
--------------

Afin d'effectuer la traduction, la bibliothèque dissocie le coté applicatif de celui du runtime. 
Lors d'un appel à une fonction MPI coté applicatif (ex:MPI_Init), le véritable appel effectué se trouve être celui de WI4MPI (ex:A_MPI_Init). Cette fonction convertit les arguments, et effectue l'appel de la fonction (ex:LOCAL_MPI_Init) de la bibliothèque MPI sous-jacente (Runtime).
La conversion des arguments implique de manière générale une traduction des constantes (MPI_Status, MPI_Comm, MPI_Op, MPI_Info, ...) entre les différentes souches MPI. 

Implémentation
--------------

Configuration de la bibliothèque
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
La configuration de la bibliothèque est exécutée lors de son chargement, c'est à dire au startup du programme. On récupère les fonctions de la souche MPI cible (celle du runtime) dans des pointeurs, on initialise les spinlocks et on configure la table des constantes MPI (A_MPI vs R_MPI). **Attention** L'initialisation des spinlocks et de la table des constantes n'est effectuée que lors de l'appel du constructeur "wrapper_init".

void __attribute__((constructor)) wrapper_init
{

	void (*)lib_handle=dlopen(getenv("TRUE_MPI_LIB"),RTLD_NOW); **On ouvre la bibliothèque du Runtime (TRUE_MPI_LIB)**
	LOCAL_MPI_Function=dlsym(lib_handle,"PMPI_Function") **On charge les fonctions MPI (coté runtime) dans les pointeurs de fonctions associés**

	**Initialisation des spinlock**

	**Ajout des constantes A_MPI vs R_MPI dans la tables des constantes**

}

__attribute__((constructor)) permet de faire tout ce qui ce trouve dans wrapper_init au chargement de la bibliothèque (startup du programme)

Astuce: Dans un appel à dlsym, "lib_handle" peut être remplacé par "RTLD_NEXT" à condition que la souche MPI du runtime suive la bibliothèque WI4MPI dans le LD_PRELOAD

La bibliothèque en comprend actuellement trois:

- wrapper_init dans test_generation_wrapper.c (API C)
- wrapper_init_f dans wrapper.c (API Fortran)
- wrapper_init_c2ff2c dans c2f_f2c.c (API c2f/f2c) 


Surcharge des symboles
~~~~~~~~~~~~~~~~~~~~~~
Les appels à MPI sont remplacés par ceux de la bibliothèque wi4mpi grâce au chargement de cette dernière dans la variable d'environnement LD_PRELOAD et au rerouting suivant:

- #define A_MPI_Send PMPI_Send
- #pragma weak MPI_Send=PMPI_Send

L'implémentation de MPI-IO (ROMIO) fait appel à des fonctions internes MPI (PMPI_function), le fait de surcharger PMPI_function pose donc un problème majeur. Étant donné que les appels internes sont effectués coté runtime, aucune conversion n'est nécessaire. Néanmoins la surcharge des symboles implique un passage vers la fonction de conversion (A_MPI_function).
Afin de contourner ce problème, un code chooser à été mis en place. 
Le code chooser s'avère aussi être utile pour l'API Fortran. En effet, pour certaines souches MPI, l'API Fortran agit comme une interface appelant l'API C pour les appels MPI.

Code chooser ASM
~~~~~~~~~~~~~~~~
Si on vient du wrapper:

- On passe les arguments à l'appel sous-jacent (LOCAL_MPI_function)

Sinon

- On convertit les arguments
- On passe les arguments convertis à l'appel sous-jacent (LOCAL_MPI_function)

Pour savoir si on vient du wrapper une variable globale in_w à été mise en place.

- in_w=1 : on vient du wrapper
- in_w=0 : on vient de l'application

Le code chooser est écrit en asm de la facon suivante:

- .global PMPI_Function 
- .weak MPI_Function **Anciennement pragma weak MPI_function=PMPI_function**
- .set MPI_function,PMPI_Function **Anciennement define A_MPI_Send PMPI_Send**
- .extern in_w 
- .extern A_MPI_Function
- .extern R_MPI_Function
- .type PMPI_Function,@function
- .text
- PMPI_Function:
- push %rbp **prologue**
- mov %rsp, %rbp **prologue**
- sub $0x20, %rsp **réservation de la stack pour 4 arguments das ce cas (attention rsp+8%16 =0)**
- mov %rdi, -0x8(%rbp) **sauvegarde des registres**
- mov %rsi, -0x10(%rbp) **sauvegarde des registres**
- mov %rdx, -0x18(%rbp) **sauvegarde des registres**
- mov %rcx, -0x20(%rbp) **sauvegarde des registres**
- .byte 0x66 **alignement pour la santé du linker**
- leaq in_w@tlsgd(%rip), %rdi **récupération de l'addresse in_w initialisée dans une TLS (Thread Local Storage)**
- .value 0x6666 **alignement pour la santé du linker**
- rex64 **alignement pour la santé du linker**
- call __tls_get_addr@PLT **récupération de in_w dans rax**
- mov -0x8(%rbp), %rdi **restauration des registres**
- mov -0x10(%rbp), %rsi **restauration des registres**
- mov -0x18(%rbp), %rdx **restauration des registres**
- mov -0x20(%rbp), %rcx **restauration des registres**
- leave **restauration de la stack**
- cmpl $0x0, 0x0(%rax) **test sur in_w (on vient du wrapper ou pas)**
- jne inwrap_MPI_Function
- jmp (*)A_MPI_Function@GOTPCREL(%rip) **go to A_MPI_Function**
- inwrap_MPI_Function:
- jmp (*)R_MPI_Function@GOTPCREL(%rip) **go to R_MPI_Function**
- .size PMPI_Function,.-PMPI_Function

A_MPI_Function
~~~~~~~~~~~~~~
La conversion se fait à l'aide de mappers présent dans mappers.h. La plupart d'entre eux s'appuient sur plusieurs tables de hashages présentes dans new_utils.* et new_utils_fn.*.
Il y a une table pour gérer la correspondance des constantes, et une table par type MPI pour assurer la traduction.
Les différents type étant:

- MPI_Comm
- MPI_Datatype
- MPI_Errhandler
- MPI_Group
- MPI_Op
- MPI_Request **Séparé en 2 tables, afin de dissocier les requêtes persistantes des requêtes non-bloquantes**
- MPI_File

Les tables présentent dans new_utils_fn.* concernent les traductions des fonctions suivantes:

- MPI_Handler_function
- MPI_Comm_copy_attr_function
- MPI_Comm_delete_function
- MPI_Type_delete_function
- MPI_Comm_errhandler_function
- MPI_File_errhandler_function 

Exemple:

A_MPI_Send(void * buf,int count,A_MPI_Datatype datatype,int dest,int tag,A_MPI_Comm comm)

{

	void * buf_tmp;

	const_buffer_conv_a2r(&buf,&buf_tmp); **mapper**

	R_MPI_Datatype datatype_tmp;

	datatype_conv_a2r(&datatype,&datatype_tmp); **mapper**

	int dest_tmp;

	dest_conv_a2r(&dest,&dest_tmp); **mapper**

	int tag_tmp;

	tag_conv_a2r(&tag,&tag_tmp); **mapper**

	R_MPI_Comm comm_tmp;

	comm_conv_a2r(&comm,&comm_tmp); **mapper**

	int ret_tmp= LOCAL_MPI_Send( buf_tmp, count, datatype_tmp, dest_tmp, tag_tmp, comm_tmp); **Appel à MPI_Send coté runtime**

	return error_code_conv_r2a(ret_tmp); **conversion du retour d'erreur**

}


R_MPI_Function
~~~~~~~~~~~~~~
Rien de spécial ici, les arguments sont directement passés à l'appel de la fonction MPI coté runtime.

int R_MPI_Send(void * buf,int count,R_MPI_Datatype datatype,int dest,int tag,R_MPI_Comm comm)
{

	int ret_tmp= LOCAL_MPI_Send( buf, count, datatype, dest, tag, comm);

	return ret_tmp;

}

Thread safety
~~~~~~~~~~~~~
Afin de rendre le code thread safe, la variable in_w (permettant de detecter si l'on vient du wrapper ou de l'application) est protégée par une TLS:

- __thread int in_w=0; (test_wrapper_generation.c:118)
- extern __thread int in_w; (wrapper.c:7)
- extern __thread int in_w; (c2f_f2c.c:6) || (c2f_f2c.c:1149)

Pour protéger les tables, les spinlock ont été utilisés (cf :thread_safety.h):

- #define lock_dest(a) pthread_spin_destroy(a)
- #define lock_init(a) pthread_spin_init(a,PTHREAD_PROCESS_PRIVATE)
- #define lock(a)  pthread_spin_lock(a)
- #define unlock(a) pthread_spin_unlock(a)
- typedef  pthread_spinlock_t (*)table_lock_t;

L'interface:
------------
Les sections précédentes sont valables pour l'interface. Comme le montre le schéma ci-dessous l'interface rajoute un niveau de plus. Le but de cette version est de compiler une application MPI avec cette interface. Pour se faire l'interface doit ainsi exporté les symboles MPI de base.

               
              dlopen|----------|  dlopen       |---------|
                   /| Lib_OMPI | ----------- > | OpenMPI |
                  / |----------|               |---------|
   |-----------| / 
   |           |/
   | INTERFACE |
   |           |\
   |-----------| \
                  \
                   \|----------|  dlopen       |----------|
                    | Lib_IMPI | ----------- > | IntelMPI |
              dlopen|----------|               |----------|


L'interface est compilé avec les fichiers interface_fort.c et interface_test.c. Ces deux fichiers appliquent respectivement la surchage des symboles vu dans la section 2.2.2 pour l'API fortran et l'API C. L'interface effectue ensuite un dlopen vers la Lib_OMPI ou la Lib_IMPI selon la conversion choisie, représentée ci-dessous par la variable d'environnement WRAPPER_WI4MPI, afin de pouvoir appeler le code chooser ASM vu dans la section 2.2.3 (cf: dlsym en-dessous). 

int MPI_Init(int * argc,char *** argv);
#define MPI_Init PMPI_Init
#pragma weak MPI_Init=PMPI_Init
int (*INTERFACE_LOCAL_MPI_Init)(int *,char ***);

int PMPI_Init(int * argc,char *** argv)
{
#ifdef DEBUG
printf("entre : PMPI_Init (interface) \n");
#endif
int ret_tmp= INTERFACE_LOCAL_MPI_Init( argc, argv);
#ifdef DEBUG
printf("sort : PMPI_Init (interface)\n");
#endif
return ret_tmp;
}
__attribute__((constructor)) void wrapper_interface(void) {
void *interface_handle=dlopen(getenv("WRAPPER_WI4MPI"),RTLD_NOW|RTLD_GLOBAL);
if(!interface_handle)
{
    printf("no true IC lib defined\nerror :%s\n",dlerror());
    exit(1);
}
INTERFACE_LOCAL_MPI_Init=dlsym(interface_handle,"CCMPI_MPI_Init");
}



Environnement d'exécution (Lire la doc utilisateur avant de commencer cette section)
------------------------------------------------------------------------------------

WI4MPI configure son environnement seulement pour l'exécution via le script wi4mpi.

- Il set la variable d'environnement LD_PRELOAD avec le preload de l'utilisateur plus le chemin vers la bibliothèque correspondant à la conversion désirée.

- Il set la variable TRUE_MPI_LIB au chemin de la souche MPI cible

- Il export la variable LD_LIBRARY_PATH en ajoutant le chemin vers les bibliothèques vides nécessaire au bon déroulement du code.

Le problème avec ce protocole, est la perte potentiel de certains symboles MPI. Pour résoudre ce problème, la bibliothèque WI4MPI exporte ces symboles. (cf test_generation_wrapper.c).

exemple :

#if defined(OMPI_INTEL)

char ompi_mpi_comm_null[1024];

...

#endif



Les fichiers
------------

- mappers.h : contient les mappers pour la traduction
- new_utils.* et new_utils_fn.*: contient les tables
- test_wrapper_generation.c : code généré contenant le code chooser ASM, A_MPI_Function, R_MPI_Function, et l'initialisation de la bibliothèque (void __attribute__((constructor)) wrapper_init).
- wrapper.c : code généré contenant l'API Fortran , ainsi que l'initialisation des pointeurs ( void __attribute__((constructor)) wrapper_init_f)
- c2f_f2c.c : code généré contenant l'API c2f/f2c , ainsi que l'initialisation des pointeurs ( void __attribute__((constructor)) wrapper_init_c2ff2c)
- thread_safety.h : contient la définition des spin_lock
- optimisation.h : gère l'utilisation des tables
- app_mpi.h/run_mpi.h : Contiennent les constantes MPI.
- app/$FROM_$TO/app_mpi.h : contient les constantes C côté applicatif 
- app/$FROM_$TO/run_mpi.h : contient les constantes C côté runtime
- $FROM_$TO/wrapper_f.h : contient les constantes Fortran
- manual_wrapper.h : contient les fonctions/mappers écrit(es) à la main.

Évolution
---------

- Étendre la couverture MPI de WI4MPI:
  
  - Toutes les fonctions actuellement présentes dans la norme MPI 3.1 sont référencées dans functions.json. De ce fait, pour étendre la couverture de la bibliothèque WI4MPI il suffit de rajouter le nom des fonctions manquantes dans func_list.txt (cf chapitre générateur), puis de regénérer test_generation_wrapper.c avec la commande : python generator.py
  - Vis a vis des mappers, il faut rajouter ceux ne couvrant pas les types exclusivement présent dans les normes > 1.3 . C'est à dire rajouter les r2a/a2r qui vont bien dans mappers.h, et editer mappers.json en fonction des noms définis.

- Pour étendre l'utilisation de WI4MPI à plusieurs souche MPI:

  - Actuellement, le code de WI4MPI est compatible avec les conversions suivantes:
     - OMPI_OMPI : **Header généré**
     - INTEL_INTEL : **Header généré**
     - MPC_MPC : **Header non généré**
     - HPMPI_HPMPI : **Header non généré**
     - INTEL_OMPI : **Header généré**
     - OMPI_INTEL : **Header généré**
     - INTEL_MPC : **Header non généré**
     - MPC_INTEL : **Header non généré**
     - OMPI_MPC : **Header non généré**
     - MPC_OMPI : **Header non généré**
     - INTEL_HPMPI : **Header non généré**
     - HPMPI_INTEL : **Header non généré**
     - OMPI_HPMPI : **Header non généré**
     - HPMPI_OMPI : **Header non généré**
     - MPC_HPMPI : **Header non généré**
     - HPMPI_MPC : **Header non généré**
  - Générer les headers (.h) associés aux différentes conversions:
     - app_mpi.h : sed 's/MPI/A_MPI/g' mpi.h | grep sed 's/PA_MPI/A_PMPI/g'
        - cette commande effectue le plus gros du travail, pour le reste, il faut se laisser guider par le compilateur
     - run_mpi.h : sed 's/MPI/R_MPI/g' mpi.h | grep sed 's/PR_MPI/R_PMPI/g'
     - Pour les conversions de type A vers A (OMPI_OMPI, MPC_MPC, ...) attention aux redéfinitions de macros lors de la génération des headers.
  - Dans le cas ou l'on désire rajouter de nouvelles conversions:
     - Dans mappers.h, rajouter aux fonctions suivantes la compatibilité associée aux différentes conversions:
        - status_prt_conv_a2r
        - status_prt_conv_r2a
        - status_tab_conv_r2a

Générateurs
===========

Il y a en tout et pour tout trois générateurs écrit en python : 

- c2ff2c.py: génère le fichiers contenant les fonctions de traductions c2ff2c.
   - python c2ff2c.py > c2f_f2c.c
- generator_merged.py : génère les fichiers contenant l'API C et l' API Fortran :
   - python generator_merged.py c > test_generation_wrapper.c
   - python generator_merged.py FORTRAN > wrapper.c
- gen_wrapper_fort.py : génère le fichier wrapper_f.h
   - python gen_wrapper_fort.py chemin_vers_la_souche_mpi_FROM chemin_vers_la_souche_mpi_TO

Code-C
------

Le générateur sert à générer le fichier test_generation_wrapper.c. (python generator.py > test_generation_wrapper.c)
Les 4 fonctions majeures sont les suivantes:

- print_symbol **génère les déclarations, les appels, et les pointeurs de fonctions**
- generate_func_asmK_tls **génère le code chooser en ASM avec la gestion des TLS pour chaque fonction MPI**
- generate_func **génère la fonction s'occupant de la traduction des arguments de son homologue MPI**
- generate_func_r **génère la fonction appellée dans le cas ou l'on vient du wrapper**

Le générateur se base sur plusieurs fichier de configurations:

- func_list.txt : Contient la liste des fonctions devant être générées
- init_conf.txt : Contient les éléments devant être appelés pour configurer le wrapper ( spinlock_init, ajout des constantes MPI a la table des constantes)
- not_generated_asmK_tls.txt : Contient les fonctions n'ayant pas été générées ( Keyval, les wrapper de fonction comme **"wrapper_user_function"**)
- not_generated_pointer.txt : Contient les pointeurs de fonctions correspand aux fonctions non générées.
- ompi_const_set.txt : Contient les constantes Bullxmpi/Openmpi devant être exportées. Ce fichier est généré grace aux éléments contenu dans le dossier utils (gene_ompi.py et ompi_const.txt).

et deux fichiers json contenant les dictionnaires décrivant les fonctions MPI.

Code-Fortran
------------

Le generateur fortran est basé sur deux générateurs distinct:

- gen_wrapper_fort.py (python gen_wrapper_fort.py  **bibliothèque MPI applicatif** **bibliothèque MPI runtime** > wrapper_f.h): Génère un fichier wrappers_f.h qui contient les conversions auto-generable (en régle générale, les conversions qui n'impliquent que des integer). Cette génération dépend des libraries mpi impliquées (le code récupère les valeurs des constantes dans les deux bibliothèques). 
- generator_fc.py (python generator_fc.py >wrapper.c): Génére le wrapping des fonctions mpi elle-même. Le code est analogue au générateur C dans ces principes. La generation de MPI-IO en fortran est encore en cours de devellopement donc non intégrée pour le moment.

Le générateur se base sur plusieurs fichiers de configurations:

- lists: Liste des fonctions de conversion autogénérables et paramétries de conversion.
- func_list.txt: Contient la liste des fonctions devant être générées
- manual_wrapper.h: Contient les mappers trop complexes à générer, ainsi que les fonctions impliquant des chaines de caractères (#define en début de ficier permet de choisir si les chaines seront compatibles ifort ou gfortran).
- gen_common.sh : utilisé dans gen_wrapper_fort.py
- lists : fichier listant les mappers devant être générés avec les constantes associées

Dictionnaires
-------------


functions.json -- C
~~~~~~~~~~~~~~~~~~
Exemple: MPI_Init(int *, char***); 

{

"args": [

{ **1er argument**

	"var": "argc", **nom de l'argument**

	"arg_dep": "", **dépendance de l'argument**

	"In": 1, **in = 1 --> l'argument doit être converti avant l'appel**

	"name": "int_ptr_mapper", **nom du mapper appelé pour convertir l'argument**

	"Out": 0 **--> l'argument ne doit pas être converti après l'appel**

},
{ **2ème argument**

	"var": "argv",

	"arg_dep": "",

	"In": 1,

	"name": "char_ppp_converter",

	"Out": 0

}

],

  "name": "MPI_Init",

  "ret": 

  {

		"var": "ret",

		"arg_dep": "",

		"In": 0,

		"name": "error_converter",

		"Out": 1

  }

}

Mots-clés supplémentaires définit pour prendre en compte les cas spéciaux de génération:

- if : indique au générateur que l'argument doit être converti seulement si la condition associée au mot clé "if" est vrai.
- if_dep : indique au générateur que l'argument testé dans le if est un tableau, nécessitant une boucle, dont l'itérateur va de 0 jusqu'à la valeur associée au mot-clé "if_dep".
- if_null : indique au générateur que l'argument doit être convertit seulement si la condition associée au mot clé "if_null" est vrai.
- if_null_dep : indique au générateur que l'argument testé dans le if_null est un tableau. Le mot clé "if_null_dep" indique donc l'index de l'élément testé. (Mot clé utilisé pour MPI_Waitainy et MPI_Testany)
- if_err: Mot clé pour gérer le cas spécial de MPI_Errhandler_set.
- del : indique au générateur que l'argument doit être supprimé de la table de hashage où il se trouve
- del2 : indique au générateur que l'argument doit être supprimé de la table de hashage où il se trouve (Cas spécial: MPI_Request_free peut être utilisée pour supprimer les requêtes persistantes, mais aussi les non-bloquantes. Ces dernières étant séparées dans deux différentes tables, on cherche la requête, si on la trouve, on la supprime.
- arg_dep: indique au générateur que l'argument est un tableau, nécessitant une boucle pour la conversion, dont l'itérateur va de 0 jusqu'a la valeur associée au mot clé "arg_dep".

Exemple d'association de mot cle possible:

+---------------------+---------------------+---------------------+---------------------+---------------------+
|                     | Wait & Test         | Waitany & Waitany   | Waitsome & Testsome | Waitall & Testall   |
+=====================+=====================+=====================+=====================+=====================+
| if                  | R_MPI_SUCCESS       | R_MPI_SUCCESS       | R_MPI_SUCCESS       |  R_MPI_SUCCESS      |
+---------------------+---------------------+---------------------+---------------------+---------------------+
| if_dep              |        NONE         |        NONE         | (*)outcount         |    count            |
+---------------------+---------------------+---------------------+---------------------+---------------------+
| if_null             | R_MPI_REQUEST_NULL  |  R_MPI_REQUEST_NULL | R_MPI_REQUEST_NULL  | R_MPI_REQUEST_NULL  |
+---------------------+---------------------+---------------------+---------------------+---------------------+
| if_null_dep         |        NONE         |        NONE         | array_of_indices    |       NONE          |
+---------------------+---------------------+---------------------+---------------------+---------------------+
| del                 | request_ptr_delete  |request_array_delete | request_array_delete|request_array_delete |
+---------------------+---------------------+---------------------+---------------------+---------------------+
| del2                |        NONE         |        NONE         |       NONE          |       NONE          |
+---------------------+---------------------+---------------------+---------------------+---------------------+


mappers.json -- C
~~~~~~~~~~~~~~~~~

Ce fichier indique au générateur, en fonction du nom (champs "name dans fucntion.json) associé à l'argument, quel mapper (a2r/r2a) doit être appelé.

Le champs "name": "int_ptr_mapper", du première argument de l'exemple précédent nous inqique donc le nom du mapper correspondant.

"int_ptr_mapper": {

	"local_alloc": 0, **indique si la variable temporaire doit être alloué localement. 0=non; 1=oui**

	"a2r": "int_ptr_conv_a2r", **fonction appelée dans le cas où in=1**

	"type": "int (*)", **type de l'argument**

	"r2a": "int_ptr_conv_r2a", **fonction appelée dans le cas où out=1**

	"no_map": "TRUE" **indique que l'argument n'a pas besoin d'être convertie. La simple présence du mot clé référence le mapper comme no_map**

}

Mots-clés supplémentaires définis pour prendre en compte les cas spéciaux de génération:

- no_map : indique que l'argument n'a pas besoin d'être convertie
- assign : indique que l'argument nécessite un simple cast (MPI_Aint, MPI_Offset)
- local_alloc : indique que la variable temporaire associée à l'argument actuel nécessite d'être allouée localement
- wrap : cas spécial où le mapper est appelé lors du call de fonction MPI du runtime. La valeur associée à "wrap" est l'argument déclenchant cette appel.
- wrapped : La valeur associée au mot clé "wrapped" se trouve être la fonction appellée lors du cas ennoncer pour le mot clé "wrap"

Cas d'utilisation de "wrap" et "wrapped": "wrapper_user_function"

Lors d'un appel à A_MPI_Op_create(A_MPI_User_function * user_fn,int commute,A_MPI_Op * op);, on doit convertir les arguments **user_fn** et op.

int A_MPI_Op_create(A_MPI_User_function * user_fn,int commute,A_MPI_Op * op)
{

	in_w=1;

	ptr_user_func=(A_MPI_User_function * )user_fn;

	R_MPI_Op  op_ltmp;

	R_MPI_Op * op_tmp=&op_ltmp; 

	int ret_tmp= LOCAL_MPI_Op_create( (R_MPI_User_function * ) wrapper_user_function, commute, op_tmp);

	op_conv_r2a(op,op_tmp); **conversion de op**

	in_w=0;

	return error_code_conv_r2a(ret_tmp);

}

**user_fn** est en réalité un pointeur de fonction dont un argument doit être converti (MPI_Datatype * ):    

**typedef void (MPI_User_function) (void * , void * , int * , MPI_Datatype * );**

**Conversion de user_fn :**

void wrapper_user_function(void * invec, void * inoutvec, int * len,R_MPI_Datatype * type)
{

	A_MPI_Datatype datatype_tmp;
	datatype_conv_r2a( &datatype_tmp,type);
	(ptr_user_func)(invec, inoutvec, len, & datatype_tmp);

}



Pour indiquer ceci au générateur, on utilise les mots-clés "wrap" et "wrapped". Pour l'exemple de MPI_Op_create on a donc:

- "wrap" : **"user_fn"**
- "wrapped" : **"wrapper_user_function"**

functions.json -- particularité Fortran
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Les fonctions peuvent définir un champs special "assoc" entre deux parametres,ceci permet de construire les liens en table de hash entre ces deux paramètres.

Exemple:

"assoc":[                               
    {                                   
        "func":"Keyval_translation_del",
        "key":"keyval_tmp"              
    }                                   
]                                       


mappers.json -- particularité Fortran
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Les champs nomap et argdep ont la même signification que en C.
Description mappers pour les générateurs, les champs ont la même signification que en C (ie: nomap,argdep...).

